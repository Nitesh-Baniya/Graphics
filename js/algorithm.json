{
	"DDA": {
		"description": "Uses incremental calculation to draw lines by calculating intermediate points along the line path using floating-point arithmetic.",
		"code": {
			"1. Initialize x, y": "",
			"2. Calculate dx = x2 - x1, dy = y2 - y1": "",
			"3. Calculate steps = max(|dx|, |dy|)": "",
			"4. Calculate x_increment = dx/steps, y_increment = dy/steps": "",
			"5. For i = 0 to steps:": [
				"Plot(round(x), round(y))",
				" x = x + x_increment",
				"y = y + y_increment"
			]
		}
	},
	"Bresenham": {
		"description": "An efficient line drawing algorithm that uses only integer arithmetic to determine which pixel is closest to the line path.",
		"code": {
			"1. Initialize x, y": "",
			"2. Calculate dx = x2 - x1, dy = y2 - y1": "",
			"3. Initialize p = 2*dy - dx": "",
			"4. For x = x1 to x2:": [
				"Plot(x, y)",
				"if p >= 0:",
				"  y = y + 1",
				"  p = p + 2*(dy - dx)",
				"else:",
				"  p = p + 2*dy"
			]
		}
	},
	"Midpoint Circle": {
		"description": "Draws a circle using the midpoint decision parameter to determine the closest pixel in each octant, exploiting circle symmetry.",
		"code": {
			"1. Initialize x = 0, y = r": "",
			"2. Initialize p = 1 - r": "",
			"3. While x <= y:": [
				"Plot all 8 symmetric points of (x, y)",
				"x = x + 1",
				"if p < 0:",
				"  p = p + 2*x + 1",
				"else:",
				"  y = y - 1",
				"  p = p + 2*(x - y) + 1"
			]
		}
	},
	"Midpoint Ellipse": {
		"description": "Draws an ellipse by dividing it into two regions and using midpoint criteria to decide the closest pixel at each step.",
		"code": {
			"1. Initialize x = 0, y = ry": "",
			"2. Calculate initial decision parameter for Region 1": "",
			"3. While (2*ry^2*x) < (2*rx^2*y):": [
				"Plot all 4 symmetric points of (x, y)",
				"x = x + 1",
				"if p1 < 0:",
				"  p1 = p1 + 2*ry^2*x + ry^2",
				"else:",
				"  y = y - 1",
				"  p1 = p1 + 2*ry^2*x - 2*rx^2*y + ry^2"
			],
			"4. Calculate initial decision parameter for Region 2": "",
			"5. While y >= 0:": [
				"Plot all 4 symmetric points of (x, y)",
				"y = y - 1",
				"if p2 > 0:",
				"  p2 = p2 - 2*rx^2*y + rx^2",
				"else:",
				"  x = x + 1",
				"  p2 = p2 + 2*ry^2*x - 2*rx^2*y + rx^2"
			]
		}
	}
}
